
@{
    ViewBag.Title = "User manager page";
}

@RenderPage("~/Views/Shared/_AdminMenu.cshtml")

<h3 class="text-center mt-5">User Manager Page</h3>

@RenderPage("~/Views/Shared/_Notif.cshtml")

@Html.Partial("_AddUserPartial", new NewUserModel { IsActive = true, RegistrationDate = DateTime.Now, PasswordResetRequest = true })

@Html.Partial("_AllUsersPartial")

@section Scripts{
    @Scripts.Render("~/bundles/jqueryval")

    @if (ViewBag.FocusOnElementId != null)
    {
        <script>
            const row = document.getElementById('@ViewBag.FocusOnElementId');
            row.setAttribute('tabindex', 0);
            row.focus();

            const urlParams = new URLSearchParams(window.location.search);
            urlParams.delete("focusOnElementId");

            const newUrl = window.location.protocol + "//" + window.location.host + window.location.pathname + "?" + urlParams.toString();
            window.history.replaceState({ path: newUrl }, '', newUrl);
        </script>
    }

    <script>
        function generateRandomPassword(length) {
            const charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!#$%^&*()';
            let password = '';
            for (let i = 0; i < length; i++) {
                const randomIndex = Math.floor(Math.random() * charset.length);
                password += charset[randomIndex];
            }
            return password;
        }

        function loadRandomPassword() {
            const password = generateRandomPassword(20);
            document.querySelector('#Password').value = password;
        }

        function copyPassword() {
            const passwordElement = document.querySelector('#Password');

            navigator.clipboard.writeText(passwordElement.value)
                .then(() => {
                    alert('Copied the value to the clipboard');
                })
                .catch((error) => {
                    console.error('Error copying to clipboard:', error);
                });
        }
    </script>

    <script>
        function deleteAssignedGroup(memberId, groupId) {
            const xhr = new XMLHttpRequest();
            const url = '@Url.Action("DeleteAssignedGroup", "Admin")';

            xhr.open('POST', url);
            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8');

            xhr.onreadystatechange = function () {
                if (xhr.readyState === 4) {
                    if (xhr.status === 200) {
                        const jsonObj = JSON.parse(xhr.response);
                        location.href = jsonObj.Url;
                    } else {
                        const jsonObj = JSON.parse(xhr.response);
                        alert(jsonObj.Status);
                    }
                }
            };

            const editableOn = @((ViewBag.EditableOn != null) ? ViewBag.EditableOn : "null");
            const registrationYear = @((ViewBag.RegistrationYear != null) ? ViewBag.RegistrationYear : "null");
            const filteredGroupId = @((ViewBag.GroupId != null) ? ViewBag.GroupId : "null");

            const formData = new FormData();
            formData.append('__RequestVerificationToken', '@Html.AntiForgeryTokenValue()');
            formData.append('memberId', memberId);
            formData.append('groupId', groupId);

            if (editableOn !== null)
                formData.append('editableOn', editableOn);

            if (registrationYear !== null)
                formData.append('registrationYear', registrationYear);

            if (filteredGroupId !== null)
                formData.append('filteredGroupId', filteredGroupId);

            const searchParams = new URLSearchParams(formData);
            const queryString = searchParams.toString();

            xhr.send(queryString);
        }

        function assignNewGroup(memberId) {
            const xhr = new XMLHttpRequest();
            const url = '@Url.Action("AssignNewGroup", "Admin")';

            xhr.open('POST', url);
            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8');

            xhr.onreadystatechange = function () {
                if (xhr.readyState === 4) {
                    if (xhr.status === 200) {
                        const jsonObj = JSON.parse(xhr.response);
                        location.href = jsonObj.Url;
                    } else {
                        const jsonObj = JSON.parse(xhr.response);
                        alert(jsonObj.Status);
                    }
                }
            };

            const editableOn = @((ViewBag.EditableOn != null) ? ViewBag.EditableOn : "null");
            const registrationYear = @((ViewBag.RegistrationYear != null) ? ViewBag.RegistrationYear : "null");
            const filteredGroupId = @((ViewBag.FilteredGroupId != null) ? ViewBag.FilteredGroupId : "null");

            const selectElement = document.getElementById(`assignNewGroup_User${memberId}`);
            const groupId = selectElement.value;

            const formData = new FormData();
            formData.append('__RequestVerificationToken', '@Html.AntiForgeryTokenValue()');
            formData.append('memberId', memberId);
            formData.append('groupId', groupId);

            if (editableOn !== null)
                formData.append('editableOn', editableOn);

            if (registrationYear !== null)
                formData.append('registrationYear', registrationYear);

            if (filteredGroupId !== null)
                formData.append('filteredGroupId', filteredGroupId);

            const searchParams = new URLSearchParams(formData);
            const queryString = searchParams.toString();

            xhr.send(queryString);
        }
    </script>
}